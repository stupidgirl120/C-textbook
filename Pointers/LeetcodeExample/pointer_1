Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]

Example 2:

Input: nums = []
Output: []
Example 3:

Input: nums = [0]
Output: []

Constraints:

0 <= nums.length <= 3000
-105 <= nums[i] <= 105



class Solution {
public:
    vector<vector<int>> threeSum(vector<int> &num) {
        sort(num.begin(), num.end());
        vector<vector<int>> rs;
        for (int i = 0; i < num.size(); i++) {
            
        // skip identical numbers except the first one
            if (i > 0 && num[i] == num[i - 1])
                continue;

            for (int j = i + 1, k = num.size() - 1; j < k;) {
                
            // skip identical numbers in the front, and numbers which make the sum too small
                if (j > i + 1 && num[j] == num[j - 1] || num[j] + num[k] < -num[i])
                    j++;
            // skip identical numbers at the tail, and numbers which make the sum too large
                else if (k < num.size() - 1 && num[k] == num[k + 1] || num[j] + num[k] > -num[i])
                    k--;
            // so far we get zero sum
                else
                    rs.push_back({ num[i], num[j++], num[k--] });
            }
        }
        return rs;
    }
};
